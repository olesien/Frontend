{"version":3,"sources":["images/logo.jpg","hooks.tsx","components/Nav.tsx","components/Members.tsx","components/Home.tsx","scripts/userSlice.tsx","components/Login.tsx","components/Contracts.tsx","subcomponents/Pagination.tsx","scripts/leaderboardSlice.tsx","subcomponents/Leaderboard.tsx","scripts/livefeedSlice.tsx","subcomponents/Livefeed.tsx","subcomponents/Conditions.tsx","scripts/contractSlice.tsx","components/Contract.tsx","scripts/queryBuilder.tsx","components/AddContract.tsx","App.tsx","store.tsx","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","Nav","useState","showDropDown","setShowDropDown","user","state","userReducer","value","toggleDropDown","ShowDropDown","console","log","document","body","id","getElementsByClassName","className","to","src","logo","alt","onClick","activeClassName","color","icon","faHome","faUsers","href","rel","target","faDiscord","name","faAddressCard","faSignOutAlt","faSignInAlt","size","faCaretSquareUp","faCaretSquareDown","reviveFactions","label","RenderTable","props","listItems","data","map","object","RenderTableData","key","first","status","faAngleDown","skill","accessLevel","faction","Members","onlineArray","setOnlineArray","awayArray","setAwayArray","offlineArray","setOfflineArray","dataArray","setDataArray","tableSorter","sFactions","onlineUsers","awayUsers","offlineUsers","index","length","addUser","factionIndex","userMini","push","a","useEffect","collectData","isMulti","onChange","options","theme","borderRadius","colors","text","primary","primary25","primary50","primary75","danger","dangerLight","neutral0","neutral5","neutral10","neutral20","neutral30","neutral40","neutral50","neutral60","neutral70","neutral80","neutral90","Home","userSlice","createSlice","initialState","reducers","login","action","payload","actions","Login","keyValue","setKeyValue","dispatch","onSubmit","event","preventDefault","history","handleSubmit","htmlFor","type","placeholder","statuses","RenderContracts","factions","reduce","total","item","array","payment","start","end","Contracts","searchValue","setSearchValue","setData","sortedData","setSortedData","coreData","setCoreData","selectedReviveFactions","setSelectedReviveFactions","selectedStatuses","setSelectedStatuses","retrievedData","setTimeout","getData","themeF","handleSearch","latestData","tempData","searchIndex","regExpression","RegExp","match","sorter","sReviveFactions","sStatuses","list","finalList","dataI","i","current","loopBreak","factionI","faPlusSquare","Array","from","Pagination","prop","activePage","setActivePage","totalPages","rowOptions","leaderboardReducer","changePage","newPage","faAngleLeft","faAngleRight","classNamePrefix","defaultValue","isClearable","isSearchable","initState","count","leaderboardSlice","pushData","TableRows","Leaderboard","leaderboard","reviver","reviverId","targetId","hospType","timestamp","success","chance","livefeedSlice","Livefeed","livefeed","livefeedReducer","Conditions","successfulRevs","failedRevs","successPrice","failedPrice","contractSlice","Main","optionButton","setOptionButton","mainButton","setMainButton","F7049","F9280","F40992","F38761","setReviveFactions","contract","useParams","contractReducer","toLocaleString","reviverFactions","faEdit","faTimesCircle","faStopCircle","faShareAlt","Contract","exact","path","children","createTheme","palette","main","secondary","InitialConfig","MaterialConfig","config","operators","types","fields","factionID","fieldSettings","min","validateValue","Number","isInteger","valueSources","preferWidgets","userID","lastAction","reviverSkill","max","hospitalType","listValues","title","earlyDischarge","level","settings","showNot","showErrorMessage","maxNumberOfRules","maxNesting","queryValue","QbUtils","uuid","properties","conjunction","children1","field","operator","valueSrc","valueType","tree","checkTree","loadTree","setState","ThemeProvider","immutableTree","jsonTree","getTree","renderBuilder","style","padding","JSON","stringify","jsonLogicFormat","styles","checkbox","cursor","backgroundColor","border","AddContract","Date","startTime","setStartTime","endTime","setEndTime","setName","setSuccessPrice","failPrice","setFailPrice","setFactions","selected","date","showTimeSelect","dateFormat","justifyContent","checked","marginLeft","faCheck","borderColor","labelStyle","userSelect","App","Helmet","component","store","configureStore","reducer","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e35199a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.d2d47287.jpg\";","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"../styling/Nav.css\";\nimport logo from \"../images/logo.jpg\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faHome,\n    faUsers,\n    faSignInAlt,\n    faSignOutAlt,\n    faAddressCard,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n    faAddressBook,\n    faCaretSquareDown,\n    faCaretSquareUp,\n} from \"@fortawesome/free-regular-svg-icons\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useRouteMatch,\n    NavLink,\n} from \"react-router-dom\";\n\n//redux for login\nimport { useAppSelector, useAppDispatch } from \"../hooks\";\n//redux logic\n\nfunction Nav() {\n    const [showDropDown, setShowDropDown] = useState(false);\n    const user = useAppSelector((state) => state.userReducer.value);\n    const dispatch = useAppDispatch();\n\n    function toggleDropDown() {\n        const ShowDropDown = !showDropDown;\n        console.log(ShowDropDown);\n        if (ShowDropDown) {\n            document.body.id = \"disableScrolling\";\n            document.getElementsByClassName(\"nav-links\")[0].id = \"showDropDown\";\n        } else {\n            document.body.id = \"\";\n            document.getElementsByClassName(\"nav-links\")[0].id = \"\";\n        }\n        setShowDropDown(ShowDropDown);\n    }\n\n    return (\n        <nav>\n            <div className=\"inner-nav\">\n                <Link to=\"/\">\n                    <img src={logo} alt=\"logo\"></img>\n                </Link>\n\n                <ul className=\"nav-links\">\n                    <li>\n                        <NavLink\n                            onClick={() => {\n                                showDropDown\n                                    ? toggleDropDown()\n                                    : console.log(\"switched page\");\n                            }}\n                            activeClassName=\"active\"\n                            to=\"/home\"\n                        >\n                            <div className=\"nav-link\">\n                                <FontAwesomeIcon\n                                    color=\"white\"\n                                    className=\"icon\"\n                                    icon={faHome}\n                                />\n                                <span className=\"nav-text\"> Home </span>\n                            </div>\n                        </NavLink>\n                    </li>\n                    <li>\n                        <NavLink\n                            onClick={() => {\n                                showDropDown\n                                    ? toggleDropDown()\n                                    : console.log(\"switched page\");\n                            }}\n                            activeClassName=\"active\"\n                            to=\"/members\"\n                        >\n                            <div className=\"nav-link\">\n                                <FontAwesomeIcon\n                                    color=\"white\"\n                                    className=\"icon\"\n                                    icon={faUsers}\n                                />\n                                <span className=\"nav-text\"> Members </span>\n                            </div>\n                        </NavLink>\n                    </li>\n                    <li>\n                        <a\n                            href=\"https://discord.gg/HvxCCau\"\n                            rel=\"noreferrer\"\n                            target=\"_blank\"\n                        >\n                            <div className=\"nav-link\">\n                                <FontAwesomeIcon\n                                    color=\"white\"\n                                    className=\"icon\"\n                                    icon={faDiscord}\n                                />\n                                <span className=\"nav-text\"> Discord </span>\n                            </div>\n                        </a>\n                    </li>\n                    {user.name ? (\n                        <li>\n                            <NavLink\n                                onClick={() => {\n                                    showDropDown\n                                        ? toggleDropDown()\n                                        : console.log(\"switched page\");\n                                }}\n                                activeClassName=\"active\"\n                                to=\"/contracts\"\n                            >\n                                <div className=\"nav-link\">\n                                    <FontAwesomeIcon\n                                        color=\"white\"\n                                        className=\"icon\"\n                                        icon={faAddressCard}\n                                    />\n                                    <span className=\"nav-text\">\n                                        {\" \"}\n                                        Contracts{\" \"}\n                                    </span>\n                                </div>\n                            </NavLink>\n                        </li>\n                    ) : (\n                        false\n                    )}\n\n                    <li className=\"loggedState\">\n                        {!user.name ? (\n                            <NavLink\n                                onClick={() => {\n                                    showDropDown\n                                        ? toggleDropDown()\n                                        : console.log(\"switched page\");\n                                }}\n                                activeClassName=\"active\"\n                                to=\"/login\"\n                            >\n                                <div className=\"nav-link\">\n                                    <FontAwesomeIcon\n                                        color=\"white\"\n                                        className=\"icon\"\n                                        icon={faSignInAlt}\n                                    />\n                                    <span className=\"nav-text\"> Login </span>\n                                </div>\n                            </NavLink>\n                        ) : (\n                            <NavLink\n                                onClick={() => {\n                                    showDropDown\n                                        ? toggleDropDown()\n                                        : console.log(\"switched page\");\n                                }}\n                                activeClassName=\"active\"\n                                to=\"/logout\"\n                            >\n                                <div className=\"nav-link\">\n                                    <FontAwesomeIcon\n                                        color=\"white\"\n                                        className=\"icon\"\n                                        icon={faSignOutAlt}\n                                    />\n                                    <span className=\"nav-text\"> Logout </span>\n                                </div>\n                            </NavLink>\n                        )}\n                    </li>\n                </ul>\n                <div className=\"dropdown-container\">\n                    <button onClick={() => toggleDropDown()}>\n                        {showDropDown ? (\n                            <FontAwesomeIcon\n                                className=\"navbar-icon\"\n                                size=\"2x\"\n                                icon={faCaretSquareUp}\n                            />\n                        ) : (\n                            <FontAwesomeIcon\n                                className=\"navbar-icon\"\n                                size=\"2x\"\n                                icon={faCaretSquareDown}\n                            />\n                        )}\n                    </button>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"../styling/Members.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport CreatableSelect, { OptionsType } from \"react-select\";\n//all the rev factions\nconst reviveFactions = [\n    { value: \"F7049\", label: \"39th Street Healers\" },\n    { value: \"F38761\", label: \"Shadow Healers\" },\n    { value: \"F9280\", label: \"Nomads Medical\" },\n    { value: \"F40992\", label: \"Medic!!\" },\n];\n\n//main component\nfunction Members() {\n    const [onlineArray, setOnlineArray] = useState([\n        {\n            key: 1,\n            name: \"null\",\n            skill: 1,\n            accessLevel: \"null\",\n            faction: \"null\",\n        },\n    ]);\n    const [awayArray, setAwayArray] = useState([\n        {\n            key: 1,\n            name: \"null\",\n            skill: 1,\n            accessLevel: \"null\",\n            faction: \"null\",\n        },\n    ]);\n    const [offlineArray, setOfflineArray] = useState([\n        {\n            key: 1,\n            name: \"null\",\n            skill: 1,\n            accessLevel: \"null\",\n            faction: \"null\",\n        },\n    ]);\n    const [dataArray, setDataArray] = useState([\n        {\n            key: 1,\n            name: \"null\",\n            skill: 1,\n            accessLevel: \"null\",\n            faction: \"null\",\n            status: \"null\",\n        },\n    ]);\n\n    //let dataArray: { name: string, skill: number, accessLevel: string, faction: string, status: string }[] = []\n\n    function tableSorter(\n        data: {\n            key: number;\n            name: string;\n            skill: number;\n            accessLevel: string;\n            faction: string;\n            status: string;\n        }[],\n        sFactions: OptionsType<{ value: string; label: string }>\n    ) {\n        //declare variables\n\n        let onlineUsers: {\n            key: number;\n            name: string;\n            skill: number;\n            accessLevel: string;\n            faction: string;\n        }[] = [];\n        let awayUsers: {\n            key: number;\n            name: string;\n            skill: number;\n            accessLevel: string;\n            faction: string;\n        }[] = [];\n        let offlineUsers: {\n            key: number;\n            name: string;\n            skill: number;\n            accessLevel: string;\n            faction: string;\n        }[] = [];\n        let tempData = data;\n\n        //order below should be based on the sorting options\n        for (let index = 0; index < data.length; index++) {\n            //will loop through all the users\n            let user = data[index];\n\n            if (\n                sFactions.length == 0 ||\n                reviveFactions.length == sFactions.length\n            ) {\n                //already know user is in a faction that fits\n\n                addUser(user);\n            } else {\n                //More than 0 factions selected: should sort\n                for (\n                    let factionIndex = 0;\n                    factionIndex < sFactions.length;\n                    factionIndex++\n                ) {\n                    let faction = sFactions[factionIndex];\n                    if (user.faction == faction.label) {\n                        addUser(user);\n                        //the faction the user is in matches with the selected ones\n                        break;\n                    }\n                }\n            }\n        }\n\n        // add the user to each respective status array\n        function addUser(user: {\n            key: number;\n            name: string;\n            skill: number;\n            accessLevel: string;\n            faction: string;\n            status: string;\n        }) {\n            let userMini = {\n                key: user.key,\n                name: user.name,\n                skill: user.skill,\n                accessLevel: user.accessLevel,\n                faction: user.faction,\n            };\n            if (user.status == \"online\") {\n                onlineUsers.push(userMini);\n            } else if (user.status == \"away\") {\n                awayUsers.push(userMini);\n            } else if (user.status == \"offline\") {\n                offlineUsers.push(userMini);\n            } else {\n            }\n        }\n\n        //sorting done, tell react!\n        //SHOULD BE STATUS SPECIFIC, JUST TEST\n        setOnlineArray(onlineUsers);\n\n        setAwayArray(awayUsers);\n        setOfflineArray(offlineUsers);\n    }\n\n    async function collectData() {\n        //The data that will later be used from API\n        let data = [\n            {\n                key: 2323,\n                name: \"olesien\",\n                skill: 100,\n                accessLevel: \"Leadership\",\n                faction: \"39th Street Healers\",\n                status: \"online\",\n            },\n            {\n                key: 22323,\n                name: \"Jairyll\",\n                skill: 100,\n                accessLevel: \"Leadership\",\n                faction: \"Medic!!\",\n                status: \"online\",\n            },\n            {\n                key: 211323,\n                name: \"Pyrit\",\n                skill: 100,\n                accessLevel: \"Leadership\",\n                faction: \"39th Street Healers\",\n                status: \"away\",\n            },\n            {\n                key: 2322223,\n                name: \"Gunfinz\",\n                skill: 49,\n                accessLevel: \"Member\",\n                faction: \"Shadow Healers\",\n                status: \"offline\",\n            },\n        ];\n        setDataArray(data);\n        tableSorter(data, []);\n    }\n    useEffect(() => {\n        collectData();\n    }, []);\n\n    return (\n        <div>\n            <header className=\"App-header\">\n                <main className=\"members\">\n                    <h2>Members</h2>\n                    <div className=\"list-factions\">\n                        <h3>Factions</h3>\n                        <div className=\"input-select\">\n                            <CreatableSelect\n                                isMulti\n                                onChange={(data) =>\n                                    tableSorter(dataArray, data)\n                                }\n                                options={reviveFactions}\n                                theme={(theme) => ({\n                                    ...theme,\n                                    borderRadius: 0,\n                                    colors: {\n                                        ...theme.colors,\n                                        text: \"white\",\n                                        primary: \"#1D5DAB\",\n                                        primary25: \"#1D5DAB\",\n                                        primary50: \"#1D5DAB\", //\n                                        primary75: \"#96291b\",\n                                        danger: \"#96291b\",\n                                        dangerLight: \"#96291b\",\n                                        neutral0: \"#3D3F43\",\n                                        neutral5: \"pink\",\n                                        neutral10: \"#313336\",\n                                        neutral20: \"#3D3F43\",\n                                        neutral30: \"#313336\",\n                                        neutral40: \"white\",\n                                        neutral50: \"white\",\n                                        neutral60: \"white\",\n                                        neutral70: \"white\",\n                                        neutral80: \"white\",\n                                        neutral90: \"white\",\n                                    },\n                                })}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"member-table-container\">\n                        {onlineArray.length > 0 ? (\n                            <div className=\"member-table-container\">\n                                <RenderTable\n                                    status=\"Online\"\n                                    first={true}\n                                    data={onlineArray}\n                                />\n                                {awayArray.length > 0 ? (\n                                    <RenderTable\n                                        status=\"Away\"\n                                        first={false}\n                                        data={awayArray}\n                                    />\n                                ) : (\n                                    <div></div>\n                                )}\n                                {offlineArray.length > 0 ? (\n                                    <RenderTable\n                                        status=\"Offline\"\n                                        first={false}\n                                        data={offlineArray}\n                                    />\n                                ) : (\n                                    <div></div>\n                                )}\n                            </div>\n                        ) : awayArray.length > 0 ? (\n                            <div className=\"member-table-container\">\n                                <RenderTable\n                                    status=\"Away\"\n                                    first={true}\n                                    data={awayArray}\n                                />\n                                {offlineArray.length > 0 ? (\n                                    <RenderTable\n                                        status=\"Offline\"\n                                        first={false}\n                                        data={offlineArray}\n                                    />\n                                ) : (\n                                    <div></div>\n                                )}\n                            </div>\n                        ) : offlineArray.length > 0 ? (\n                            <div className=\"member-table-container\">\n                                <RenderTable\n                                    status=\"Offline\"\n                                    first={true}\n                                    data={offlineArray}\n                                />\n                            </div>\n                        ) : (\n                            <div className=\"member-table-container\"></div>\n                        )}\n                    </div>\n                </main>\n            </header>\n        </div>\n    );\n}\n//WARNING: MIGHT HAPPEN THAT A LIST HAS NO ONLINE USERS???\n\nfunction RenderTable(props: {\n    data: {\n        key: number;\n        name: string;\n        skill: number;\n        accessLevel: string;\n        faction: string;\n    }[];\n    first: boolean;\n    status: string;\n}) {\n    const [factions, setFactions] = useState();\n    let data = props.data;\n    const listItems = data.map((object) => (\n        <RenderTableData data={object} key={object.key}></RenderTableData>\n    ));\n    return props.first ? (\n        <table className=\"member-table\">\n            <thead>\n                <tr>\n                    <th className=\"status\">{props.status}</th>\n                    <th className=\"head\">Name</th>\n                    <th className=\"head\">\n                        Skill{\" \"}\n                        <FontAwesomeIcon\n                            color=\"white\"\n                            className=\"icon\"\n                            icon={faAngleDown}\n                        />\n                    </th>\n                    <th className=\"head\">Acccess level</th>\n                    <th className=\"head\">Faction </th>\n                </tr>\n            </thead>\n\n            <tbody>{listItems}</tbody>\n        </table>\n    ) : (\n        <table className=\"member-table\">\n            <thead>\n                <tr>\n                    <th className=\"status\">{props.status}</th>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                </tr>\n            </thead>\n            <tbody>{listItems}</tbody>\n        </table>\n    );\n}\n//[{ status: string, name: string, skill: number, accessLevel: string, faction: string }]\nfunction RenderTableData(props: {\n    data: {\n        key: number;\n        name: string;\n        skill: number;\n        accessLevel: string;\n        faction: string;\n    };\n}) {\n    return (\n        <tr>\n            <td className=\"line\">\n                <div></div>\n            </td>\n            <td className=\"body name\">\n                <a\n                    href={\n                        \"https://www.torn.com/profiles.php?XID=\" +\n                        props.data.key\n                    }\n                >\n                    {props.data.name}\n                </a>\n            </td>\n            <td className=\"body skill\">{props.data.skill}</td>\n            <td className=\"body access-level\">{props.data.accessLevel}</td>\n            <td className=\"body faction\">{props.data.faction}</td>\n        </tr>\n    );\n}\nexport default Members;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"../styling/Home.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <div>\n            <header className=\"App-header\">\n                <main className=\"home\">\n                    <div className=\"header\">\n                        <h1>Universal Health Care</h1>\n                        <h3>Limitless revives at reasonable prices!</h3>\n                    </div>\n                    <div className=\"main-body\">\n                        <div className=\"table-parent\">\n                            <h4>Our prices</h4>\n                            <p>(successes / fails)</p>\n                            <table className=\"home-table\">\n                                <thead>\n                                    <tr>\n                                        <th></th>\n                                        <th>Below 50% chance</th>\n                                        <th>50% chance and up</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>All skills</td>\n                                        <td>900k/900k</td>\n                                        <td>900k/900k or 1m/600k</td>\n                                    </tr>\n                                    <tr>\n                                        <td>75 skill+</td>\n                                        <td>1m/1m</td>\n                                        <td>1m/1m or 1.1m/700k</td>\n                                    </tr>\n                                    <tr>\n                                        <td>100 skill</td>\n                                        <td>Not available </td>\n                                        <td>1.1m/1.1m or 1.2m/800k </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"info\">\n                            <h4>How to get in touch</h4>\n                            <p>\n                                The easiest way to get in touch is to contact us\n                                through the discord linked above\n                            </p>\n                            <p>\n                                Another way is to check in \"Members\" also linked\n                                above for leaders or people with mail perms that\n                                can assist in starting/ending a contract\n                            </p>\n                            <p>\n                                The last way is to check in our{\" \"}\n                                <a href=\"https://www.torn.com/forums.php#/p=threads&f=9&t=16190736&b=0&a=0\">\n                                    forum post\n                                </a>\n                            </p>\n                        </div>\n                        <div className=\"info\">\n                            <h4>The factions</h4>\n                            <p>\n                                The UHC alliance consists of 4 factions: 39th\n                                Street Healers, Medic!!, Nomads Medical, Shadow\n                                Healers, for a combined total of over 350\n                                members!\n                            </p>\n                            <p>\n                                We are not looking for new members to join the\n                                alliance at this time, but we are looking for\n                                new faction members!\n                            </p>\n                        </div>\n                    </div>\n                </main>\n            </header>\n        </div>\n    );\n}\n\nexport default Home;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"../store\";\r\n\r\n// Define a type for the slice state\r\ninterface userState {\r\n    value: { name: \"\" };\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: userState = {\r\n    value: { name: \"\" },\r\n};\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"userReducer\",\r\n    initialState: {\r\n        value: { name: \"\" },\r\n    },\r\n    reducers: {\r\n        // increment: (state) => {\r\n        //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n        //     // doesn't actually mutate the state because it uses the Immer library,\r\n        //     // which detects changes to a \"draft state\" and produces a brand new\r\n        //     // immutable state based off those changes\r\n        //     state.value += 1;\r\n        // },\r\n        // decrement: (state) => {\r\n        //     state.value -= 1;\r\n        // },\r\n        login: (state, action: PayloadAction<{ name: string }>) => {\r\n            state.value = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { login } = userSlice.actions;\r\n\r\nexport const selectCount = (state: RootState) => state.userReducer.value;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"../styling/Login.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\n\nimport { useAppSelector, useAppDispatch } from \"../hooks\";\nimport { login } from \"../scripts/userSlice\";\n\nfunction Login(props: any) {\n    const [keyValue, setKeyValue] = useState({ value: \"\" });\n    const [logState, setLogState] = useState(false);\n\n    const user = useAppSelector((state) => state.userReducer.value);\n    const dispatch = useAppDispatch();\n\n    function handleSubmit(event: any) {\n        console.log(event, keyValue);\n        event.preventDefault();\n        dispatch(login({ name: \"hi\" }));\n        props.history.push(\"/home\");\n        //alert(\"Logged In\");\n    }\n\n    function handleChange(event: any) {\n        setKeyValue({ value: event.target.value });\n        console.log(event);\n    }\n\n    function joinDiscord() {}\n\n    return (\n        <div>\n            <header className=\"App-header\">\n                <main className=\"login\">\n                    <p>{user.name}</p>\n\n                    <h2>Member Login</h2>\n                    <form onSubmit={(event) => handleSubmit(event)}>\n                        <label htmlFor=\"input\">API key:</label>\n                        <input\n                            type=\"password\"\n                            className=\"input-field\"\n                            placeholder=\"Enter API key...\"\n                            value={keyValue.value}\n                            onChange={handleChange}\n                        />\n\n                        <input\n                            type=\"submit\"\n                            className=\"submit-button\"\n                            value=\"Login\"\n                        />\n                    </form>\n                    <button\n                        className=\"discord-login\"\n                        onClick={() => joinDiscord()}\n                    >\n                        <div>\n                            <span>Discord Login</span>\n                            <FontAwesomeIcon\n                                color=\"white\"\n                                size=\"2x\"\n                                className=\"icon\"\n                                icon={faDiscord}\n                            />\n                        </div>\n                    </button>\n                </main>\n            </header>\n        </div>\n    );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"../styling/Contracts.css\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useRouteMatch,\n    NavLink,\n} from \"react-router-dom\";\nimport CreatableSelect, { OptionsType } from \"react-select\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import {\n//     faArrowAltCircleLeft,\n//     faArrowAltCircleRight,\n// } from \"@fortawesome/free-regular-svg-icons\";\n\nimport { faPlusSquare } from \"@fortawesome/free-solid-svg-icons\";\n\n//select status\nconst statuses = [\n    { value: 1, label: \"Ended\" },\n    { value: 2, label: \"Calculating\" },\n    { value: 3, label: \"Live\" },\n];\n\nconst reviveFactions = [\n    { value: 7049, label: \"39th Street Healers\" },\n    { value: 40992, label: \"Medic!!\" },\n    { value: 9280, label: \"Nomads Medical\" },\n    { value: 38761, label: \"Shadow Healers\" },\n];\n\nfunction Contracts() {\n    //search for name\n    const [searchValue, setSearchValue] = useState({ value: \"\" });\n    const [data, setData] = useState([\n        {\n            key: 1,\n            name: \"Loading....\",\n            factions: [\"Loading....\"],\n            payment: \"Loading....\",\n            start: \"Loading....\",\n            end: \"Loading....\",\n            status: \"Loading....\",\n        },\n    ]);\n\n    const [sortedData, setSortedData] = useState([\n        {\n            key: 1,\n            name: \"Loading....\",\n            factions: [\"Loading....\"],\n            payment: \"Loading....\",\n            start: \"Loading....\",\n            end: \"Loading....\",\n            status: \"Loading....\",\n        },\n    ]);\n    const [coreData, setCoreData] = useState([\n        {\n            key: 1,\n            name: \"Loading....\",\n            factions: [\"Loading....\"],\n            payment: \"Loading....\",\n            start: \"Loading....\",\n            end: \"Loading....\",\n            status: \"Loading....\",\n        },\n    ]);\n\n    const [selectedReviveFactions, setSelectedReviveFactions] = useState([\n        { value: 7049, label: \"39th Street Healers\" },\n        { value: 40992, label: \"Medic!!\" },\n        { value: 9280, label: \"Nomads Medical\" },\n        { value: 38761, label: \"Shadow Healers\" },\n    ]);\n\n    const [selectedStatuses, setSelectedStatuses] = useState([\n        { value: 1, label: \"Ended\" },\n        { value: 2, label: \"Calculating\" },\n        { value: 3, label: \"Live\" },\n    ]);\n\n    async function getData() {\n        let retrievedData: {\n            key: number;\n            name: string;\n            factions: Array<string>;\n            payment: string;\n            start: string;\n            end: string;\n            status: string;\n        }[] = [\n            {\n                key: 1,\n                name: \"SA main\",\n                factions: [\"39th Street Healers\", \"Medic!!\", \"Nomads Medical\"],\n                payment: \"1.2m / 700k\",\n                start: \"2020-07-22 01:33\",\n                end: \"2020-07-23 01:33\",\n                status: \"Live\",\n            },\n            {\n                key: 2,\n                name: \"39th main\",\n                factions: [\n                    \"39th Street Healers\",\n                    \"Medic!!\",\n                    \"Nomads Medical\",\n                    \"Shadow Healers\",\n                ],\n                payment: \"1m / 600k\",\n                start: \"2020-07-22 02:33\",\n                end: \"2020-07-22 05:33\",\n                status: \"Ended\",\n            },\n        ];\n\n        setTimeout(() => {\n            setCoreData(retrievedData);\n            setSortedData(retrievedData);\n            setData(retrievedData);\n        }, 2000);\n    }\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    let themeF = (theme: any) => {\n        return {\n            ...theme.colors,\n            text: \"white\",\n            primary: \"#1D5DAB\",\n            primary25: \"#1D5DAB\",\n            primary50: \"#1D5DAB\", //\n            primary75: \"#96291b\",\n            danger: \"#96291b\",\n            dangerLight: \"#96291b\",\n            neutral0: \"#3D3F43\",\n            neutral5: \"pink\",\n            neutral10: \"#313336\",\n            neutral20: \"#3D3F43\",\n            neutral30: \"#313336\",\n            neutral40: \"white\",\n            neutral50: \"white\",\n            neutral60: \"white\",\n            neutral70: \"white\",\n            neutral80: \"white\",\n            neutral90: \"white\",\n        };\n    };\n    function handleSubmit(event: any) {\n        console.log(event, searchValue);\n        event.preventDefault();\n        //alert(\"Logged In\");\n        //for search button!\n        handleSearch(sortedData);\n    }\n\n    function handleSearch(latestData: any) {\n        let tempData = [];\n        let sortedData = latestData;\n\n        for (\n            let searchIndex = 0;\n            searchIndex < sortedData.length;\n            searchIndex++\n        ) {\n            let regExpression = new RegExp(searchValue.value, \"i\");\n            if (sortedData[searchIndex].name.match(regExpression)) {\n                tempData.push(sortedData[searchIndex]);\n            }\n        }\n\n        setData(tempData);\n    }\n\n    function handleChange(event: any) {\n        setSearchValue({ value: event.target.value });\n        console.log(event);\n    }\n    async function sorter(\n        sReviveFactions: { value: number; label: string }[],\n        sStatuses: { value: number; label: string }[]\n    ) {\n        //sReviveFactions is optional\n        console.log(sReviveFactions, sStatuses);\n        //What do I want to do? I want to filter out the \"core\" list based on if it contains the right revive factions / status'\n        let list: any = [];\n        let finalList: any = [];\n\n        //make sure it doesn't have to do more loops than needed\n        if (sReviveFactions.length == 4) {\n            sReviveFactions = [];\n            list = coreData;\n        }\n\n        //for loop for the general data\n        for (let dataI = 0; dataI < coreData.length; dataI++) {\n            //revive factions\n            let factions = coreData[dataI].factions;\n\n            console.log(\"dataI: \" + dataI, factions);\n\n            //for loop for the selected factions\n            for (let i = 0; i < sReviveFactions.length; i++) {\n                let current = sReviveFactions[i].label;\n                console.log(\"i: \" + i, current);\n                let loopBreak = false;\n                //for loop for the loop INSIDE the core data object > factions [list]\n                for (let factionI = 0; factionI < factions.length; factionI++) {\n                    let faction = factions[factionI];\n                    console.log(\"factionI: \" + factionI, faction);\n                    if (faction == current) {\n                        console.log(\"match\");\n                        list.push(coreData[dataI]);\n                        loopBreak = true;\n                        break;\n                    }\n                }\n                if (loopBreak) {\n                    break;\n                }\n            }\n        }\n        console.log(list);\n\n        if (sReviveFactions.length == 0) {\n            list = coreData;\n        }\n        //console.log(\"LISTTTTTT --- \", list);\n        if (sStatuses.length == 3) {\n            sReviveFactions = [];\n        }\n        //for loop for the general data\n\n        for (let dataI = 0; dataI < list.length; dataI++) {\n            let status = list[dataI].status;\n            //statuses\n            for (let i = 0; i < sStatuses.length; i++) {\n                let current = sStatuses[i].label;\n                if (status == current) {\n                    console.log(\"match\");\n                    finalList.push(list[dataI]);\n                    break;\n                }\n            }\n        }\n\n        if (sStatuses.length == 0) {\n            finalList = list;\n        }\n        setSortedData(finalList);\n        //setData(finalList);\n\n        //end\n        handleSearch(finalList);\n    }\n\n    const listItems = data.map((object) => (\n        <RenderContracts data={object} key={object.key} />\n    ));\n    //<object[]>([]\n\n    return (\n        <main className=\"contracts\">\n            <h2>Contracts</h2>\n            <div className=\"add-contract-outer\">\n                <NavLink to=\"/add-contract\"className=\"add-contract\">\n                    <FontAwesomeIcon\n                        color=\"white\"\n                        className=\"icon\"\n                        size=\"lg\"\n                        icon={faPlusSquare}\n                    />\n                    Add contract\n                </NavLink>\n            </div>\n\n            <div className=\"admin-conditions\">\n                <CreatableSelect\n                    isMulti\n                    onChange={(data) => {\n                        setSelectedReviveFactions(Array.from(data));\n                        sorter(Array.from(data), selectedStatuses);\n                    }}\n                    options={reviveFactions}\n                    placeholder=\"Select revive factions...\"\n                    theme={(theme) => ({\n                        ...theme,\n                        borderRadius: 0,\n                        colors: themeF(theme),\n                    })}\n                />\n            </div>\n\n            <div className=\"conditions\">\n                <form onSubmit={(event) => handleSubmit(event)}>\n                    <label htmlFor=\"input\">Search for name:</label>\n                    <input\n                        type=\"text\"\n                        className=\"input-field\"\n                        placeholder=\"Enter contract name...\"\n                        value={searchValue.value}\n                        onChange={handleChange}\n                    />\n\n                    <input\n                        type=\"submit\"\n                        className=\"submit-button\"\n                        value=\"Search\"\n                    />\n                </form>\n                <div>\n                    <CreatableSelect\n                        isMulti\n                        onChange={(data) => {\n                            setSelectedStatuses(Array.from(data));\n                            sorter(selectedReviveFactions, Array.from(data));\n                        }}\n                        options={statuses}\n                        placeholder=\"Select contract statuses...\"\n                        theme={(theme) => ({\n                            ...theme,\n                            borderRadius: 0,\n                            colors: themeF(theme),\n                        })}\n                    />\n                </div>\n            </div>\n\n            <ul>{listItems}</ul>\n        </main>\n    );\n}\n\nfunction RenderContracts(props: {\n    data: {\n        key: number;\n        name: string;\n        factions: Array<string>;\n        payment: string;\n        start: string;\n        end: string;\n        status: string;\n    };\n}) {\n    let factions = props.data.factions.reduce((total, item, index, array) => {\n        return total + (index == 0 ? \" \" : \", \") + item;\n    }, \"\");\n    return (\n        <li className=\"contract-grid\">\n            <div className=\"contract-title\">\n                <h2>{props.data.name}</h2>\n            </div>\n            <div className=\"contract-factions\">\n                <p>{factions}</p>\n            </div>\n            <div className=\"contract-payment\">\n                <p>Payment type:</p>\n\n                <p>{props.data.payment}</p>\n            </div>\n            <div className=\"contract-start\">\n                <p>Start: {props.data.start}</p>\n            </div>\n            <div className=\"contract-end\">\n                <p>End: {props.data.end}</p>\n            </div>\n            <div className=\"contract-button\">\n                <NavLink className=\"no-line\" to={\"/contract/\" + props.data.key}>\n                    <p className=\"button-link\">View Contract</p>\n                </NavLink>\n            </div>\n            <div className=\"contract-status\">\n                <p className={props.data.status}>Status: {props.data.status}</p>\n            </div>\n        </li>\n    );\n}\n\nexport default Contracts;\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styling/Nav.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nimport {\r\n    faAngleLeft,\r\n    faAngleRight,\r\n    faEdit,\r\n    faTimesCircle,\r\n    faStopCircle,\r\n    faShareAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { baseProps } from \"react-native-gesture-handler/lib/typescript/handlers/gestureHandlers\";\r\n\r\nimport \"../styling/pagination.css\";\r\n\r\n//redux\r\nimport { useAppSelector, useAppDispatch } from \"../hooks\";\r\nimport { pushData } from \"../scripts/leaderboardSlice\";\r\n\r\nfunction Pagination(prop: { data: string }) {\r\n    const [activePage, setActivePage] = useState(141);\r\n    const [totalPages, setTotalPages] = useState(152);\r\n    const leaderboard = useAppSelector(\r\n        (state) => state.leaderboardReducer.value\r\n    );\r\n    const dispatch = useAppDispatch();\r\n\r\n    let rowOptions = [\r\n        { value: 5, label: \"5 rows\" },\r\n        { value: 10, label: \"10 rows\" },\r\n        { value: 20, label: \"20 rows\" },\r\n        { value: 50, label: \"50 rows\" },\r\n        { value: -1, label: \"All rows\" },\r\n    ];\r\n\r\n    let themeF = (theme: any) => {\r\n        return {\r\n            ...theme.colors,\r\n            text: \"white\",\r\n            primary: \"#3D3F43\",\r\n            primary25: \"#1D5DAB\",\r\n            primary50: \"#1D5DAB\",\r\n            primary75: \"#96291b\",\r\n            danger: \"#96291b\",\r\n            dangerLight: \"#96291b\",\r\n            neutral0: \"#3D3F43\",\r\n            neutral5: \"pink\",\r\n            neutral10: \"#313336\",\r\n            neutral20: \"#3D3F43\",\r\n            neutral30: \"#1D5DAB\",\r\n            neutral40: \"white\",\r\n            neutral50: \"white\",\r\n            neutral60: \"white\",\r\n            neutral70: \"white\",\r\n            neutral80: \"white\",\r\n            neutral90: \"white\",\r\n        };\r\n    };\r\n\r\n    //fake values for testing purposes\r\n    const page = {\r\n        activePage: 141,\r\n        totalPages: 152,\r\n        rows: 5,\r\n    };\r\n\r\n    function changePage(newPage: number) {\r\n        console.log(newPage);\r\n        setActivePage(newPage);\r\n    }\r\n\r\n    return (\r\n        <div className=\"pagination\">\r\n            <div className=\"outer-pagination-nav\">\r\n                <div>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (activePage > 1) {\r\n                                setActivePage(activePage - 1);\r\n                            }\r\n                        }}\r\n                        className=\"arrow-container left\"\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            color=\"white\"\r\n                            className=\"icon\"\r\n                            size=\"2x\"\r\n                            icon={faAngleLeft}\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <div className=\"pagination-nav\">\r\n                    {/* First page */}\r\n                    <div>\r\n                        {activePage == 1 ? (\r\n                            <p className=\"active-page\">1</p>\r\n                        ) : (\r\n                            <button onClick={() => changePage(1)}>1</button>\r\n                        )}\r\n                    </div>\r\n                    <div>\r\n                        {activePage == 2 ? (\r\n                            <p className=\"active-page\">2</p>\r\n                        ) : //If page is after 4 and there are more than 7 pages, you can't see the first page\r\n                        totalPages > 7 && activePage > 4 ? (\r\n                            <p>...</p>\r\n                        ) : totalPages > 1 ? (\r\n                            <button onClick={() => changePage(2)}>2</button>\r\n                        ) : (\r\n                            <p></p>\r\n                        )}\r\n                    </div>\r\n                    <div>\r\n                        {totalPages > 2 ? (\r\n                            activePage == 3 ? (\r\n                                <p className=\"active-page\">3</p>\r\n                            ) : totalPages > 7 && activePage > 4 ? (\r\n                                activePage < totalPages - 3 ? (\r\n                                    <button\r\n                                        onClick={() =>\r\n                                            changePage(activePage - 1)\r\n                                        }\r\n                                    >\r\n                                        {activePage - 1}\r\n                                    </button>\r\n                                ) : (\r\n                                    <button\r\n                                        onClick={() =>\r\n                                            changePage(totalPages - 4)\r\n                                        }\r\n                                    >\r\n                                        {totalPages - 4}\r\n                                    </button>\r\n                                )\r\n                            ) : (\r\n                                <button onClick={() => changePage(3)}>3</button>\r\n                            )\r\n                        ) : (\r\n                            <p></p>\r\n                        )}\r\n                    </div>\r\n                    {/* Center */}\r\n                    <div>\r\n                        {totalPages > 3 ? (\r\n                            activePage == 4 ? (\r\n                                <p className=\"active-page\">4</p>\r\n                            ) : totalPages > 7 && activePage > 4 ? (\r\n                                activePage < totalPages - 3 ? (\r\n                                    <p className=\"active-page\">{activePage}</p>\r\n                                ) : totalPages - 3 == activePage ? (\r\n                                    <p className=\"active-page\">{activePage}</p>\r\n                                ) : (\r\n                                    <button\r\n                                        onClick={() =>\r\n                                            changePage(totalPages - 3)\r\n                                        }\r\n                                    >\r\n                                        {totalPages - 3}\r\n                                    </button>\r\n                                )\r\n                            ) : (\r\n                                <button onClick={() => changePage(4)}>4</button>\r\n                            )\r\n                        ) : (\r\n                            <p></p>\r\n                        )}\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            //If page is on 5 it should just show that\r\n                            totalPages > 4 ? (\r\n                                totalPages > 7 && activePage > 4 ? (\r\n                                    activePage < totalPages - 3 ? (\r\n                                        <button\r\n                                            onClick={() =>\r\n                                                changePage(activePage + 1)\r\n                                            }\r\n                                        >\r\n                                            {activePage + 1}\r\n                                        </button>\r\n                                    ) : activePage == totalPages - 2 ? (\r\n                                        <p className=\"active-page\">\r\n                                            {activePage}\r\n                                        </p>\r\n                                    ) : (\r\n                                        <button\r\n                                            onClick={() =>\r\n                                                changePage(totalPages - 2)\r\n                                            }\r\n                                        >\r\n                                            {totalPages - 2}\r\n                                        </button>\r\n                                    )\r\n                                ) : activePage == 5 ? (\r\n                                    <p className=\"active-page\">5</p>\r\n                                ) : (\r\n                                    <button onClick={() => changePage(5)}>\r\n                                        5\r\n                                    </button>\r\n                                )\r\n                            ) : (\r\n                                <p></p>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        {totalPages > 5 ? (\r\n                            activePage == totalPages - 1 ? (\r\n                                <p className=\"active-page\">{activePage}</p>\r\n                            ) : //If page is after 4 and there are more than 7 pages, you can't see the first page\r\n                            activePage < totalPages - 3 ? (\r\n                                totalPages > 7 || activePage > 4 ? (\r\n                                    <p>...</p>\r\n                                ) : activePage == 6 ? (\r\n                                    <p className=\"active-page\">6</p>\r\n                                ) : (\r\n                                    <button onClick={() => changePage(6)}>\r\n                                        6\r\n                                    </button>\r\n                                )\r\n                            ) : (totalPages > 6 && activePage) > 4 ? (\r\n                                <button\r\n                                    onClick={() => changePage(totalPages - 1)}\r\n                                >\r\n                                    {totalPages - 1}\r\n                                </button>\r\n                            ) : activePage == 6 ? (\r\n                                <p className=\"active-page\">{activePage}</p>\r\n                            ) : (\r\n                                <button onClick={() => changePage(6)}>6</button>\r\n                            )\r\n                        ) : (\r\n                            <p></p>\r\n                        )}\r\n                    </div>\r\n                    {/* Last page */}\r\n                    <div>\r\n                        {totalPages > 6 ? (\r\n                            activePage == totalPages ? (\r\n                                <p className=\"active-page\">{activePage}</p>\r\n                            ) : (\r\n                                <button onClick={() => changePage(totalPages)}>\r\n                                    {totalPages}\r\n                                </button>\r\n                            )\r\n                        ) : (\r\n                            <p></p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (activePage < totalPages) {\r\n                                setActivePage(activePage + 1);\r\n                            }\r\n                        }}\r\n                        className=\"arrow-container right\"\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            color=\"white\"\r\n                            className=\"icon\"\r\n                            size=\"2x\"\r\n                            icon={faAngleRight}\r\n                        />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"show-rows\">\r\n                <Select\r\n                    className=\"basic-single\"\r\n                    classNamePrefix=\"select\"\r\n                    defaultValue={rowOptions[0]}\r\n                    isClearable={true}\r\n                    isSearchable={false}\r\n                    name=\"color\"\r\n                    theme={(theme) => ({\r\n                        ...theme,\r\n                        borderRadius: 0,\r\n                        colors: themeF(theme),\r\n                    })}\r\n                    options={rowOptions}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"../store\";\r\n\r\n// Define a type for the slice state\r\n\r\nconst initState = [\r\n    {\r\n        name: \"null\",\r\n        id: 0,\r\n        count: 0,\r\n        skill: 0,\r\n        faction: \"null\",\r\n    },\r\n];\r\ninterface leaderboardState {\r\n    value: {\r\n        name: string;\r\n        id: number;\r\n        count: number;\r\n        skill: number;\r\n        faction: string;\r\n    }[];\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: leaderboardState = {\r\n    value: initState,\r\n};\r\n\r\nexport const leaderboardSlice = createSlice({\r\n    name: \"leaderboardReducer\",\r\n    initialState: {\r\n        value: initState,\r\n    },\r\n    reducers: {\r\n        // increment: (state) => {\r\n        //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n        //     // doesn't actually mutate the state because it uses the Immer library,\r\n        //     // which detects changes to a \"draft state\" and produces a brand new\r\n        //     // immutable state based off those changes\r\n        //     state.value += 1;\r\n        // },\r\n        // decrement: (state) => {\r\n        //     state.value -= 1;\r\n        // },\r\n        pushData: (\r\n            state,\r\n            action: PayloadAction<\r\n                {\r\n                    name: string;\r\n                    id: number;\r\n                    count: number;\r\n                    skill: number;\r\n                    faction: string;\r\n                }[]\r\n            >\r\n        ) => {\r\n            state.value = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { pushData } = leaderboardSlice.actions;\r\n\r\n//export const selectCount = (state: RootState) => state.userReducer.value;\r\n\r\nexport default leaderboardSlice.reducer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styling/Nav.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nimport {\r\n    faAngleLeft,\r\n    faAngleRight,\r\n    faEdit,\r\n    faTimesCircle,\r\n    faStopCircle,\r\n    faShareAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { baseProps } from \"react-native-gesture-handler/lib/typescript/handlers/gestureHandlers\";\r\n\r\nimport Pagination from \"./Pagination\";\r\n\r\n//redux\r\nimport { useAppSelector, useAppDispatch } from \"../hooks\";\r\nimport { pushData } from \"../scripts/leaderboardSlice\";\r\n\r\nfunction Leaderboard(prop: { data: string }) {\r\n    const [rows, setRows] = useState({ value: 1, label: \"C\" });\r\n    const leaderboard = useAppSelector(\r\n        (state) => state.leaderboardReducer.value\r\n    );\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            pushData([\r\n                {\r\n                    name: \"olesien\",\r\n                    id: 1000,\r\n                    count: 52,\r\n                    skill: 100,\r\n                    faction: \"39th Street Healers\",\r\n                },\r\n                {\r\n                    name: \"natty_both\",\r\n                    id: 100,\r\n                    count: 1,\r\n                    skill: 1,\r\n                    faction: \"NomNom Medical\",\r\n                },\r\n            ])\r\n        );\r\n    }, []);\r\n\r\n    const listItems = leaderboard.map((object) => (\r\n        <TableRows data={object} key={object.id} />\r\n    ));\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"conditions\">\r\n                <Pagination data={\"\"} />\r\n                {leaderboard.length > 0 ? (\r\n                    <table className=\"contract-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"th-name\">Name</th>\r\n                                <th className=\"th-count\">Count</th>\r\n                                <th className=\"th-skill\">Skill</th>\r\n                                <th className=\"th-faction\">Faction</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>{listItems}</tbody>\r\n                    </table>\r\n                ) : (\r\n                    <p>No person has been revived yet</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// function TableRows() {\r\n//     return (\r\n//         <tr>\r\n//             <td className=\"td-name\">{props.data.name}</td>\r\n//             <td className=\"td-count\">{props.data.count}</td>\r\n//             <td className=\"td-skill\">{props.data.skill}</td>\r\n//             <td className=\"td-faction\">{props.data.faction}</td>\r\n//         </tr>\r\n//     );\r\n// }\r\n\r\nfunction TableRows(props: {\r\n    data: {\r\n        name: string;\r\n        id: number;\r\n        count: number;\r\n        skill: number;\r\n        faction: string;\r\n    };\r\n}) {\r\n    return (\r\n        <tr>\r\n            <td className=\"td-name\">\r\n                <a\r\n                    href={\r\n                        \"https://www.torn.com/profiles.php?XID=\" + props.data.id\r\n                    }\r\n                >\r\n                    {props.data.name}\r\n                </a>\r\n            </td>\r\n            <td className=\"td-count\">{props.data.count}</td>\r\n            <td className=\"td-skill\">{props.data.skill}</td>\r\n            <td className=\"td-faction\">{props.data.faction}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Leaderboard;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"../store\";\r\n\r\n// Define a type for the slice state\r\n\r\nconst initState = [\r\n    {\r\n        key: 1,\r\n        reviver: \"null\",\r\n        reviverId: 0,\r\n        target: \"null\",\r\n        targetId: 1,\r\n        hospType: \"null\",\r\n        timestamp: \"null\",\r\n        success: false,\r\n        chance: 0,\r\n    },\r\n];\r\ninterface livefeedState {\r\n    value: {\r\n        key: number;\r\n        reviver: string;\r\n        reviverId: number;\r\n        target: string;\r\n        targetId: number;\r\n        hospType: string;\r\n        timestamp: string;\r\n        success: boolean;\r\n        chance: number;\r\n    }[];\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: livefeedState = {\r\n    value: initState,\r\n};\r\n\r\nexport const livefeedSlice = createSlice({\r\n    name: \"leaderboardReducer\",\r\n    initialState: {\r\n        value: initState,\r\n    },\r\n    reducers: {\r\n        // increment: (state) => {\r\n        //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n        //     // doesn't actually mutate the state because it uses the Immer library,\r\n        //     // which detects changes to a \"draft state\" and produces a brand new\r\n        //     // immutable state based off those changes\r\n        //     state.value += 1;\r\n        // },\r\n        // decrement: (state) => {\r\n        //     state.value -= 1;\r\n        // },\r\n        pushData: (\r\n            state,\r\n            action: PayloadAction<\r\n                {\r\n                    key: number;\r\n                    reviver: string;\r\n                    reviverId: number;\r\n                    target: string;\r\n                    targetId: number;\r\n                    hospType: string;\r\n                    timestamp: string;\r\n                    success: boolean;\r\n                    chance: number;\r\n                }[]\r\n            >\r\n        ) => {\r\n            state.value = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { pushData } = livefeedSlice.actions;\r\n\r\n//export const selectCount = (state: RootState) => state.userReducer.value;\r\n\r\nexport default livefeedSlice.reducer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styling/Nav.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nimport {\r\n    faAngleLeft,\r\n    faAngleRight,\r\n    faEdit,\r\n    faTimesCircle,\r\n    faStopCircle,\r\n    faShareAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Pagination from \"./Pagination\";\r\n\r\n//redux\r\nimport { useAppSelector, useAppDispatch } from \"../hooks\";\r\nimport { pushData } from \"../scripts/livefeedSlice\";\r\nimport livefeedSlice from \"../scripts/livefeedSlice\";\r\n\r\nfunction Livefeed(prop: {\r\n    data: {\r\n        id: number;\r\n        optionButton: string;\r\n        mainButton: string;\r\n        reviverFactions: {\r\n            F7049: boolean;\r\n            F9280: boolean;\r\n            F40992: boolean;\r\n            F38761: boolean;\r\n        };\r\n    };\r\n}) {\r\n    // data: {\r\n    //     metadata: {\r\n    //         total: number;\r\n    //         page: number;\r\n    //         per: number;\r\n    //     };\r\n    //     items: {\r\n    //         chance: number;\r\n    //         success: boolean;\r\n    //         reason: string;\r\n    //         reviverName: string;\r\n    //         targetName: string;\r\n    //         lastAction: number;\r\n    //         target: number;\r\n    //         reviver: number;\r\n    //         status: string;\r\n    //         timestamp: string;\r\n    //     }[];\r\n    // };\r\n    const [rows, setRows] = useState({ value: 1, label: \"C\" });\r\n    const livefeed = useAppSelector((state) => state.livefeedReducer.value);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            pushData([\r\n                {\r\n                    key: 1,\r\n                    reviver: \"olesien\",\r\n                    reviverId: 1,\r\n                    target: \"natty_both\",\r\n                    targetId: 10,\r\n                    hospType: \"Hospitalized\",\r\n                    timestamp: \"2020-08-06 01:48\",\r\n                    success: true,\r\n                    chance: 1,\r\n                },\r\n                {\r\n                    key: 2,\r\n                    reviver: \"pyrit\",\r\n                    reviverId: 1,\r\n                    target: \"SemiRocket\",\r\n                    targetId: 2,\r\n                    hospType: \"Attacked\",\r\n                    timestamp: \"2025-08-06 01:48\",\r\n                    success: false,\r\n                    chance: 98,\r\n                },\r\n            ])\r\n        );\r\n    }, []);\r\n\r\n    const listItems = livefeed.map((object) => (\r\n        <TableRows data={object} key={object.key} />\r\n    ));\r\n    return (\r\n        <div>\r\n            <div className=\"conditions\">\r\n                <Pagination data={\"\"} />\r\n                {livefeed.length > 0 ? (\r\n                    <table className=\"contract-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"th-reviver\">Reviver</th>\r\n                                <th className=\"th-target\">Target</th>\r\n                                <th className=\"th-hosp-type\">Hosp type</th>\r\n                                <th className=\"th-timestamp\">Timestamp</th>\r\n                                <th className=\"th-success\">Success</th>\r\n                                <th className=\"th-chance\">Chance</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>{listItems}</tbody>\r\n                    </table>\r\n                ) : (\r\n                    <p>No person has been revived yet</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TableRows(props: {\r\n    data: {\r\n        key: number;\r\n        reviver: string;\r\n        reviverId: number;\r\n        target: string;\r\n        targetId: number;\r\n        hospType: string;\r\n        timestamp: string;\r\n        success: boolean;\r\n        chance: number;\r\n    };\r\n}) {\r\n    return (\r\n        <tr>\r\n            <td className=\"td-reviver\">\r\n                <a\r\n                    href={\r\n                        \"https://www.torn.com/profiles.php?XID=\" +\r\n                        props.data.reviverId\r\n                    }\r\n                >\r\n                    {props.data.reviver}\r\n                </a>\r\n            </td>\r\n            <td className=\"td-target\">\r\n                <a\r\n                    href={\r\n                        \"https://www.torn.com/profiles.php?XID=\" +\r\n                        props.data.targetId\r\n                    }\r\n                >\r\n                    {props.data.target}\r\n                </a>\r\n            </td>\r\n            <td className=\"td-hosp-type\">{props.data.hospType}</td>\r\n            <td className=\"td-timestamp\">{props.data.timestamp}</td>\r\n            <td className=\"td-success\">{props.data.success ? \"Yes\" : \"No\"}</td>\r\n            <td className=\"td-chance\">{props.data.chance}%</td>\r\n        </tr>\r\n    );\r\n}\r\nexport default Livefeed;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styling/Nav.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nimport {\r\n    faAngleLeft,\r\n    faAngleRight,\r\n    faEdit,\r\n    faTimesCircle,\r\n    faStopCircle,\r\n    faShareAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Conditions() {\r\n    return (\r\n        <div className=\"condition-page\">\r\n            <ul className=\"line-ul\">\r\n                <li>\r\n                    <div>\r\n                        <p>Status Type</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>Online</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>Last Action</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>5 minutes</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>Factions</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>39th Street Killers</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>Revive factions</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>\r\n                            39th Street Healers, Medic!!, Nomads Medical, Shadow\r\n                            Healers\r\n                        </p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>Hospital Types</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>Hopsitalized</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>Early Discharge</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>Not counted</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>Start time</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>2021-07-06 03:30</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>End time</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>2021-07-07 04:30</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>Minimum reviver skill</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>0</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <div>\r\n                        <p>Minimum chance</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>50%</p>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Conditions;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"../store\";\r\n\r\n// Define a type for the slice state\r\n\r\nconst initState = {\r\n    name: \"Faction\",\r\n    successfulRevs: 0,\r\n    failedRevs: 0,\r\n    successPrice: 0,\r\n    failedPrice: 0,\r\n};\r\ninterface contractState {\r\n    value: {\r\n        name: string;\r\n        successfulRevs: number;\r\n        failedRevs: number;\r\n        successPrice: number;\r\n        failedPrice: number;\r\n    };\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: contractState = {\r\n    value: initState,\r\n};\r\n\r\nexport const contractSlice = createSlice({\r\n    name: \"contractReducer\",\r\n    initialState: {\r\n        value: initState,\r\n    },\r\n    reducers: {\r\n        // increment: (state) => {\r\n        //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n        //     // doesn't actually mutate the state because it uses the Immer library,\r\n        //     // which detects changes to a \"draft state\" and produces a brand new\r\n        //     // immutable state based off those changes\r\n        //     state.value += 1;\r\n        // },\r\n        // decrement: (state) => {\r\n        //     state.value -= 1;\r\n        // },\r\n        pushData: (\r\n            state,\r\n            action: PayloadAction<{\r\n                name: string;\r\n                successfulRevs: number;\r\n                failedRevs: number;\r\n                successPrice: number;\r\n                failedPrice: number;\r\n            }>\r\n        ) => {\r\n            state.value = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { pushData } = contractSlice.actions;\r\n\r\nexport const selectCount = (state: RootState) => state.userReducer.value;\r\n\r\nexport default contractSlice.reducer;\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"../styling/Contract.css\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams,\n} from \"react-router-dom\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import {\n//     faArrowAltCircleLeft,\n//     faArrowAltCircleRight,\n// } from \"@fortawesome/free-regular-svg-icons\";\n\nimport {\n    faAngleLeft,\n    faAngleRight,\n    faEdit,\n    faTimesCircle,\n    faStopCircle,\n    faShareAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\n\n//subcomponents\nimport Leaderboard from \"../subcomponents/Leaderboard\";\nimport Livefeed from \"../subcomponents/Livefeed\";\nimport Conditions from \"../subcomponents/Conditions\";\n\n//scripts\n\n//redux\nimport { useAppSelector, useAppDispatch } from \"../hooks\";\nimport { pushData } from \"../scripts/contractSlice\";\n\nfunction Contract(props: any) {\n    return (\n        <div>\n            <header className=\"App-header\">\n                <Route exact path=\"/contract/:id\" children={<Main />} />\n            </header>\n        </div>\n    );\n}\n\nfunction Main() {\n    // We can use the `useParams` hook here to access\n    // the dynamic pieces of the URL.\n    const [optionButton, setOptionButton] = useState(\"both\");\n    const [mainButton, setMainButton] = useState(\"livefeed\");\n    const [reviveFactions, setReviveFactions] = useState({\n        F7049: true,\n        F9280: true,\n        F40992: true,\n        F38761: true,\n    });\n    interface ParamTypes {\n        id: string;\n    }\n\n    const contractId = 10;\n    let { id } = useParams<ParamTypes>();\n    //redux\n\n    const contract = useAppSelector((state) => state.contractReducer.value);\n    const dispatch = useAppDispatch();\n    //dispatch(pushData({ name: \"39th Street Killers\" }));\n    useEffect(() => {\n        dispatch(\n            pushData({\n                name: \"39th Street Killers\",\n                successfulRevs: 1000,\n                failedRevs: 54,\n                successPrice: 1000000,\n                failedPrice: 500000,\n            })\n        );\n    }, []);\n\n    //contract\n\n    //leaderboard\n\n    //livefeed\n\n    return (\n        <main className=\"contract\">\n            <div className=\"title\">\n                <h1>{contract.name}</h1>\n\n                <ul className=\"line-ul\">\n                    <li>\n                        <div>\n                            <p>\n                                Total revives{\": \"}\n                                {contract.successfulRevs + contract.failedRevs}\n                            </p>\n                        </div>\n                        <div>\n                            <p>\n                                $\n                                {(\n                                    contract.successfulRevs *\n                                        contract.successPrice +\n                                    contract.failedRevs * contract.failedPrice\n                                ).toLocaleString()}\n                            </p>\n                        </div>\n                    </li>\n                    <li>\n                        <div>\n                            <p>Successful revives: {contract.successfulRevs}</p>\n                        </div>\n                        <div>\n                            <p>\n                                $\n                                {(\n                                    contract.successfulRevs *\n                                    contract.successPrice\n                                ).toLocaleString()}\n                            </p>\n                        </div>\n                    </li>\n                    <li>\n                        <div>\n                            <p>Failed revives: {contract.failedRevs}</p>\n                        </div>\n                        <div>\n                            <p>\n                                $\n                                {(\n                                    contract.failedRevs * contract.failedPrice\n                                ).toLocaleString()}\n                            </p>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            <div className=\"main-page\">\n                <div className=\"button-container\">\n                    {mainButton == \"leaderboard\" ? (\n                        <button className=\"selected\">Leaderboard</button>\n                    ) : (\n                        <button\n                            className=\"not-selected\"\n                            onClick={() => setMainButton(\"leaderboard\")}\n                        >\n                            Leaderboard\n                        </button>\n                    )}\n\n                    {mainButton == \"livefeed\" ? (\n                        <button className=\"selected\">Live Feed</button>\n                    ) : (\n                        <button\n                            className=\"not-selected\"\n                            onClick={() => setMainButton(\"livefeed\")}\n                        >\n                            Live Feed\n                        </button>\n                    )}\n\n                    {mainButton == \"conditions\" ? (\n                        <button className=\"selected\">Conditions</button>\n                    ) : (\n                        <button\n                            className=\"not-selected\"\n                            onClick={() => setMainButton(\"conditions\")}\n                        >\n                            Conditions\n                        </button>\n                    )}\n                </div>\n\n                {mainButton == \"leaderboard\" ? (\n                    <Leaderboard data={\"null\"} />\n                ) : mainButton == \"livefeed\" ? (\n                    <Livefeed\n                        data={{\n                            id: 10,\n                            optionButton: optionButton,\n                            mainButton: mainButton,\n                            reviverFactions: reviveFactions,\n                        }}\n                    />\n                ) : (\n                    <Conditions />\n                )}\n            </div>\n            <div className=\"options\">\n                <h3>Options</h3>\n                <div className=\"button-container\">\n                    {optionButton == \"successes\" ? (\n                        <button className=\"selected\">Successes</button>\n                    ) : (\n                        <button\n                            className=\"not-selected\"\n                            onClick={() => setOptionButton(\"successes\")}\n                        >\n                            Successes\n                        </button>\n                    )}\n\n                    {optionButton == \"both\" ? (\n                        <button className=\"selected\">Both</button>\n                    ) : (\n                        <button\n                            className=\"not-selected\"\n                            onClick={() => setOptionButton(\"both\")}\n                        >\n                            Both\n                        </button>\n                    )}\n\n                    {optionButton == \"fails\" ? (\n                        <button className=\"selected\">Fails</button>\n                    ) : (\n                        <button\n                            className=\"not-selected\"\n                            onClick={() => setOptionButton(\"fails\")}\n                        >\n                            Fails\n                        </button>\n                    )}\n                </div>\n                <div className=\"revive-factions\">\n                    <div className=\"revive-faction\">\n                        <p>39th Street Healers</p>\n\n                        {reviveFactions.F7049 ? (\n                            <div className=\"button-container\">\n                                <button\n                                    className=\"not-selected\"\n                                    onClick={() => {\n                                        setReviveFactions({\n                                            ...reviveFactions,\n                                            F7049: false,\n                                        });\n                                    }}\n                                >\n                                    Hide\n                                </button>\n                                <button className=\"selected\">Show</button>\n                            </div>\n                        ) : (\n                            <div className=\"button-container\">\n                                <button className=\"selected\">Hide</button>\n                                <button\n                                    className=\"not-selected\"\n                                    onClick={() => {\n                                        setReviveFactions({\n                                            ...reviveFactions,\n                                            F7049: true,\n                                        });\n                                    }}\n                                >\n                                    Show\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"revive-faction\">\n                        <p>Nomads Medical</p>\n\n                        {reviveFactions.F9280 ? (\n                            <div className=\"button-container\">\n                                <button\n                                    className=\"not-selected\"\n                                    onClick={() => {\n                                        setReviveFactions({\n                                            ...reviveFactions,\n                                            F9280: false,\n                                        });\n                                    }}\n                                >\n                                    Hide\n                                </button>\n                                <button className=\"selected\">Show</button>\n                            </div>\n                        ) : (\n                            <div className=\"button-container\">\n                                <button className=\"selected\">Hide</button>\n                                <button\n                                    className=\"not-selected\"\n                                    onClick={() => {\n                                        setReviveFactions({\n                                            ...reviveFactions,\n                                            F9280: true,\n                                        });\n                                    }}\n                                >\n                                    Show\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"revive-faction\">\n                        <p>Medic!!</p>\n\n                        {reviveFactions.F40992 ? (\n                            <div className=\"button-container\">\n                                <button\n                                    className=\"not-selected\"\n                                    onClick={() => {\n                                        setReviveFactions({\n                                            ...reviveFactions,\n                                            F40992: false,\n                                        });\n                                    }}\n                                >\n                                    Hide\n                                </button>\n                                <button className=\"selected\">Show</button>\n                            </div>\n                        ) : (\n                            <div className=\"button-container\">\n                                <button className=\"selected\">Hide</button>\n                                <button\n                                    className=\"not-selected\"\n                                    onClick={() => {\n                                        setReviveFactions({\n                                            ...reviveFactions,\n                                            F40992: true,\n                                        });\n                                    }}\n                                >\n                                    Show\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"revive-faction\">\n                        <p>Shadow Healers</p>\n\n                        {reviveFactions.F38761 ? (\n                            <div className=\"button-container\">\n                                <button\n                                    className=\"not-selected\"\n                                    onClick={() => {\n                                        setReviveFactions({\n                                            ...reviveFactions,\n                                            F38761: false,\n                                        });\n                                    }}\n                                >\n                                    Hide\n                                </button>\n                                <button className=\"selected\">Show</button>\n                            </div>\n                        ) : (\n                            <div className=\"button-container\">\n                                <button className=\"selected\">Hide</button>\n                                <button\n                                    className=\"not-selected\"\n                                    onClick={() => {\n                                        setReviveFactions({\n                                            ...reviveFactions,\n                                            F38761: true,\n                                        });\n                                    }}\n                                >\n                                    Show\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n            <div className=\"admin\">\n                <h3>Admin Panel</h3>\n                <div className=\"admin-options\">\n                    <a>\n                        <FontAwesomeIcon\n                            color=\"white\"\n                            className=\"icon\"\n                            size=\"lg\"\n                            icon={faEdit}\n                        />\n                        <p>Edit contract</p>\n                    </a>\n                    <a>\n                        <FontAwesomeIcon\n                            color=\"white\"\n                            className=\"icon\"\n                            size=\"lg\"\n                            icon={faTimesCircle}\n                        />\n                        <p>Remove contract</p>\n                    </a>\n                    <a>\n                        <FontAwesomeIcon\n                            color=\"white\"\n                            className=\"icon\"\n                            size=\"lg\"\n                            icon={faStopCircle}\n                        />\n\n                        <p>End contract</p>\n                    </a>\n                    <a>\n                        <FontAwesomeIcon\n                            color=\"white\"\n                            className=\"icon\"\n                            size=\"lg\"\n                            icon={faShareAlt}\n                        />\n                        <p>Share contract</p>\n                    </a>\n                </div>\n            </div>\n        </main>\n    );\n}\n\nexport default Contract;\n","import React, { useState } from \"react\";\r\nimport { Query, Builder, Utils as QbUtils } from \"react-awesome-query-builder\";\r\n// types\r\nimport {\r\n    JsonGroup,\r\n    Config,\r\n    ImmutableTree,\r\n    BuilderProps,\r\n    BasicConfig,\r\n} from \"react-awesome-query-builder\";\r\n\r\n// For AntDesign widgets only:\r\n//import AntdConfig from \"react-awesome-query-builder/lib/config/antd\";\r\n// import \"antd/dist/antd.css\"; // or import \"react-awesome-query-builder/css/antd.less\";\r\n// For Material-UI widgets only:\r\nimport MaterialConfig from \"react-awesome-query-builder/lib/config/material\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport \"react-awesome-query-builder/lib/css/styles.css\";\r\nimport \"../styling/queryBuilder.scss\";\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#2071d4\",\r\n        },\r\n        secondary: {\r\n            main: \"#313336\",\r\n        },\r\n    },\r\n});\r\n\r\n// import \"react-awesome-query-builder/lib/css/compact_styles.css\"; //optional, for more compact styles\r\n\r\n// Choose your skin (ant/material/vanilla):\r\nconst InitialConfig = MaterialConfig; // or MaterialConfig or BasicConfig\r\n\r\n// You need to provide your own config. See below 'Config format'\r\nconst config: Config = {\r\n    ...InitialConfig,\r\n\r\n    operators: {\r\n        ...InitialConfig.operators,\r\n    },\r\n\r\n    types: {\r\n        ...InitialConfig.types,\r\n    },\r\n\r\n    fields: {\r\n        factionID: {\r\n            label: \"faction ID\",\r\n            type: \"number\",\r\n            fieldSettings: {\r\n                min: 1,\r\n                validateValue: (value) => Number.isInteger(value),\r\n            },\r\n            valueSources: [\"value\"],\r\n            preferWidgets: [\"number\"],\r\n            operators: [\"equal\", \"not_equal\", \"is_empty\", \"is_not_empty\"],\r\n        },\r\n\r\n        userID: {\r\n            label: \"user ID\",\r\n            type: \"number\",\r\n            fieldSettings: {\r\n                min: 1,\r\n                validateValue: (value) => Number.isInteger(value),\r\n            },\r\n            valueSources: [\"value\"],\r\n            preferWidgets: [\"number\"],\r\n            operators: [\"equal\", \"not_equal\"],\r\n        },\r\n\r\n        lastAction: {\r\n            label: \"last action (seconds)\",\r\n            type: \"number\",\r\n            fieldSettings: {\r\n                min: 0,\r\n                validateValue: (value) => Number.isInteger(value),\r\n            },\r\n            valueSources: [\"value\"],\r\n            preferWidgets: [\"number\"],\r\n            operators: [\r\n                \"less\",\r\n                \"less_or_equal\",\r\n                \"greater\",\r\n                \"greater_or_equal\",\r\n                \"between\",\r\n            ],\r\n        },\r\n\r\n        reviverSkill: {\r\n            label: \"reviver skill\",\r\n            type: \"number\",\r\n            fieldSettings: {\r\n                min: 0,\r\n                max: 100,\r\n                validateValue: (value) => Number.isInteger(value),\r\n            },\r\n            valueSources: [\"value\"],\r\n            preferWidgets: [\"number\"],\r\n            operators: [\r\n                \"less\",\r\n                \"less_or_equal\",\r\n                \"greater\",\r\n                \"greater_or_equal\",\r\n                \"between\",\r\n                \"equal\",\r\n            ],\r\n        },\r\n\r\n        chance: {\r\n            label: \"revive chance\",\r\n            type: \"number\",\r\n            fieldSettings: {\r\n                min: 0,\r\n                max: 100,\r\n            },\r\n            valueSources: [\"value\"],\r\n            preferWidgets: [\"number\"],\r\n            operators: [\r\n                \"less\",\r\n                \"less_or_equal\",\r\n                \"greater\",\r\n                \"greater_or_equal\",\r\n                \"between\",\r\n                \"equal\",\r\n            ],\r\n        },\r\n\r\n        hospitalType: {\r\n            label: \"hospital reason\",\r\n            type: \"select\",\r\n            fieldSettings: {\r\n                listValues: [\r\n                    { value: \"hospitalized\", title: \"Hospitalized\" },\r\n                    { value: \"attacked\", title: \"Attacked\" },\r\n                    { value: \"mugged\", title: \"Mugged\" },\r\n                    { value: \"lost\", title: \"Loss\" },\r\n                    { value: \"crime\", title: \"Crime\" },\r\n                    { value: \"overdosed\", title: \"Overdose\" },\r\n                    { value: \"crashed\", title: \"Car crash\" },\r\n                    { value: \"selfHosped\", title: \"Self-hosped\" },\r\n                    { value: \"casino\", title: \"Casino\" },\r\n                    { value: \"unknown\", title: \"Unknown\" },\r\n                ],\r\n            },\r\n            valueSources: [\"value\"],\r\n        },\r\n\r\n        status: {\r\n            label: \"status\",\r\n            type: \"select\",\r\n            fieldSettings: {\r\n                listValues: [\r\n                    { value: \"Online\", title: \"Online\" },\r\n                    { value: \"Idle\", title: \"Idle\" },\r\n                    { value: \"Offline\", title: \"Offline\" },\r\n                ],\r\n            },\r\n            valueSources: [\"value\"],\r\n        },\r\n\r\n        success: {\r\n            label: \"success\",\r\n            type: \"boolean\",\r\n            valueSources: [\"value\"],\r\n            operators: [\"equal\"],\r\n        },\r\n\r\n        earlyDischarge: {\r\n            label: \"early discharge\",\r\n            type: \"boolean\",\r\n            valueSources: [\"value\"],\r\n            operators: [\"equal\"],\r\n        },\r\n\r\n        level: {\r\n            label: \"level\",\r\n            type: \"number\",\r\n            fieldSettings: {\r\n                min: 1,\r\n                max: 100,\r\n                validateValue: (value) => Number.isInteger(value),\r\n            },\r\n            valueSources: [\"value\"],\r\n            preferWidgets: [\"number\"],\r\n            operators: [\r\n                \"less\",\r\n                \"less_or_equal\",\r\n                \"greater\",\r\n                \"greater_or_equal\",\r\n                \"between\",\r\n                \"equal\",\r\n            ],\r\n        },\r\n    },\r\n\r\n    settings: {\r\n        ...InitialConfig.settings,\r\n\r\n        showNot: false,\r\n        showErrorMessage: true,\r\n        maxNumberOfRules: 20,\r\n        maxNesting: 3,\r\n    },\r\n};\r\n\r\n// You can load query value from your backend storage (for saving see `Query.onChange()`)\r\nconst queryValue: JsonGroup = {\r\n    id: QbUtils.uuid(),\r\n    type: \"group\",\r\n    properties: {\r\n        conjunction: \"AND\",\r\n    },\r\n    children1: {\r\n        [QbUtils.uuid()]: {\r\n            type: \"rule\",\r\n            properties: {\r\n                field: \"factionID\",\r\n                operator: \"equal\",\r\n                value: [null],\r\n                valueSrc: [\"value\"],\r\n                valueType: [\"number\"],\r\n            },\r\n        },\r\n        [QbUtils.uuid()]: {\r\n            type: \"rule\",\r\n            properties: {\r\n                field: \"reviverSkill\",\r\n                operator: \"greater_or_equal\",\r\n                value: [50],\r\n                valueSrc: [\"value\"],\r\n                valueType: [\"number\"],\r\n            },\r\n        },\r\n        [QbUtils.uuid()]: {\r\n            type: \"rule\",\r\n            properties: {\r\n                field: \"chance\",\r\n                operator: \"greater_or_equal\",\r\n                value: [50],\r\n                valueSrc: [\"value\"],\r\n                valueType: [\"number\"],\r\n            },\r\n        },\r\n        [QbUtils.uuid()]: {\r\n            type: \"rule\",\r\n            properties: {\r\n                field: \"earlyDischarge\",\r\n                operator: \"equal\",\r\n                value: [false],\r\n                valueSrc: [\"value\"],\r\n                valueType: [\"boolean\"],\r\n            },\r\n        },\r\n        [QbUtils.uuid()]: {\r\n            type: \"rule\",\r\n            properties: {\r\n                field: \"hospitalType\",\r\n                operator: \"select_equals\",\r\n                value: [\"hospitalized\"],\r\n                valueSrc: [\"value\"],\r\n                valueType: [\"select\"],\r\n            },\r\n        },\r\n        [QbUtils.uuid()]: {\r\n            type: \"group\",\r\n            properties: {\r\n                conjunction: \"OR\",\r\n            },\r\n            children1: {\r\n                [QbUtils.uuid()]: {\r\n                    type: \"rule\",\r\n                    properties: {\r\n                        field: \"status\",\r\n                        operator: \"select_equals\",\r\n                        value: [\"Online\"],\r\n                        valueSrc: [\"value\"],\r\n                        valueType: [\"select\"],\r\n                    },\r\n                },\r\n                [QbUtils.uuid()]: {\r\n                    type: \"rule\",\r\n                    properties: {\r\n                        field: \"lastAction\",\r\n                        operator: \"less_or_equal\",\r\n                        value: [300],\r\n                        valueSrc: [\"value\"],\r\n                        valueType: [\"number\"],\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nexport const Contract: React.FC = () => {\r\n    const [state, setState] = useState({\r\n        tree: QbUtils.checkTree(QbUtils.loadTree(queryValue), config),\r\n        config: config,\r\n    });\r\n\r\n    const onChange = (immutableTree: ImmutableTree, config: Config) => {\r\n        // Tip: for better performance you can apply `throttle` - see `examples/demo`\r\n        setState({ tree: immutableTree, config: config });\r\n\r\n        const jsonTree = QbUtils.getTree(immutableTree);\r\n        console.log(jsonTree);\r\n        // `jsonTree` can be saved to backend, and later loaded to `queryValue`\r\n    };\r\n\r\n    const renderBuilder = (props: BuilderProps) => (\r\n        <div className=\"query-builder-container\" style={{ padding: \"10px\" }}>\r\n            <div className=\"query-builder qb-lite\">\r\n                <Builder {...props} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div>\r\n                <Query\r\n                    {...config}\r\n                    value={state.tree}\r\n                    onChange={onChange}\r\n                    renderBuilder={renderBuilder}\r\n                />\r\n                <div className=\"query-builder-result\">\r\n                    {/* <div>\r\n                    Query string:{\" \"}\r\n                    <pre>\r\n                        {JSON.stringify(\r\n                            QbUtils.queryString(state.tree, state.config)\r\n                        )}\r\n                    </pre>\r\n                </div>\r\n                <div>\r\n                    MongoDb query:{\" \"}\r\n                    <pre>\r\n                        {JSON.stringify(\r\n                            QbUtils.mongodbFormat(state.tree, state.config)\r\n                        )}\r\n                    </pre>\r\n                </div>\r\n                <div>\r\n                    SQL where:{\" \"}\r\n                    <pre>\r\n                        {JSON.stringify(\r\n                            QbUtils.sqlFormat(state.tree, state.config)\r\n                        )}\r\n                    </pre>\r\n                </div> */}\r\n                    <div>\r\n                        JsonLogic:{\" \"}\r\n                        <pre>\r\n                            {JSON.stringify(\r\n                                QbUtils.jsonLogicFormat(\r\n                                    state.tree,\r\n                                    state.config\r\n                                )\r\n                            )}\r\n                        </pre>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"../styling/AddContract.css\";\n//@ts-ignore\nimport Checkbox from \"react-custom-checkbox\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\n\n//import \"../styling/datepicker.scss\";\n//query\nimport { Contract } from \"../scripts/queryBuilder\";\n\nconst styles = {\n    checkbox: {\n        cursor: \"pointer\",\n        backgroundColor: \"#3D3F43\",\n        border: \"none\",\n        padding: \"3px\",\n    },\n};\n\nfunction AddContract() {\n    const [startTime, setStartTime] = useState(new Date());\n    const [endTime, setEndTime] = useState(new Date());\n    const [name, setName] = useState({ value: \"\" });\n    const [successPrice, setSuccessPrice] = useState({ value: \"\" });\n    const [failPrice, setFailPrice] = useState({ value: \"\" });\n\n    const [factions, setFactions] = useState({\n        F7049: false,\n        F40992: false,\n        F9280: false,\n        F38761: false,\n    });\n    return (\n        <div>\n            <header className=\"App-header\">\n                <main className=\"new-contract\">\n                    <div className=\"header\">\n                        <h1>Add new contract</h1>\n                        <h3>good contract</h3>\n                    </div>\n\n                    <div className=\"new-contract-container\">\n                        <div className=\"input-container\">\n                            <label>\n                                Contract name:\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Contract name...\"\n                                    value={name.value}\n                                    onChange={(event) =>\n                                        setName({ value: event.target.value })\n                                    }\n                                />\n                            </label>\n                        </div>\n                        <div className=\"input-container\">\n                            <label>\n                                Success price:\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Ex: '1000000'\"\n                                    value={successPrice.value}\n                                    onChange={(event) => {\n                                        const regex = /^[0-9]+$/;\n                                        if (\n                                            event.target.value.match(regex) ||\n                                            event.target.value.length < 1\n                                        ) {\n                                            setSuccessPrice({\n                                                value: event.target.value,\n                                            });\n                                        }\n                                    }}\n                                />\n                            </label>\n                        </div>\n                        <div className=\"input-container\">\n                            <label>\n                                Fail price:\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Ex: '600000'\"\n                                    value={failPrice.value}\n                                    onChange={(event) => {\n                                        const regex = /^[0-9]+$/;\n                                        if (\n                                            event.target.value.match(regex) ||\n                                            event.target.value.length < 1\n                                        ) {\n                                            setFailPrice({\n                                                value: event.target.value,\n                                            });\n                                        }\n                                    }}\n                                />\n                            </label>\n                        </div>\n                        <div className=\"date-container\">\n                            <div className=\"date-icon\">\n                                <p>Start date:</p>\n                            </div>\n\n                            <DatePicker\n                                selected={startTime}\n                                onChange={(date: Date) => setStartTime(date)}\n                                showTimeSelect\n                                dateFormat=\"Pp\"\n                                className=\"react-datepicker\"\n                            />\n                        </div>\n                        <div>\n                            <p>End date:</p>\n                            <div\n                                className=\"date-container\"\n                                style={{ justifyContent: \"left\" }}\n                            >\n                                <input\n                                    checked={true}\n                                    type=\"radio\"\n                                    value=\"live\"\n                                    name=\"endTime\"\n                                />\n                                <div className=\"line\"></div>\n                                <p style={{ marginLeft: \"17px\" }}>\n                                    Live contract\n                                </p>\n                            </div>\n\n                            <div className=\"date-container\">\n                                <input\n                                    type=\"radio\"\n                                    value=\"set\"\n                                    name=\"endTime\"\n                                />\n\n                                <DatePicker\n                                    selected={endTime}\n                                    onChange={(date: Date) => setEndTime(date)}\n                                    showTimeSelect\n                                    dateFormat=\"Pp\"\n                                    className=\"react-datepicker\"\n                                />\n                            </div>\n                        </div>\n                        <div className=\"revive-factions\">\n                            <p>Revive Factions:</p>\n                            <Checkbox\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#1d5dab\"\n                                        className=\"icon\"\n                                        size=\"lg\"\n                                        icon={faCheck}\n                                    />\n                                }\n                                name=\"faction1\"\n                                checked={true}\n                                onChange={(value: boolean) =>\n                                    setFactions({ ...factions, F7049: value })\n                                }\n                                borderColor=\"#2F3134\"\n                                style={styles.checkbox}\n                                labelStyle={{\n                                    marginLeft: 5,\n                                    userSelect: \"none\",\n                                }}\n                                label=\"39th Street Healers\"\n                            />\n                            <Checkbox\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#1d5dab\"\n                                        className=\"icon\"\n                                        size=\"lg\"\n                                        icon={faCheck}\n                                    />\n                                }\n                                name=\"faction2\"\n                                checked={true}\n                                onChange={(value: boolean) =>\n                                    setFactions({ ...factions, F38761: value })\n                                }\n                                borderColor=\"#2F3134\"\n                                style={styles.checkbox}\n                                labelStyle={{\n                                    marginLeft: 5,\n                                    userSelect: \"none\",\n                                }}\n                                label=\"Shadow Healers\"\n                            />\n                            <Checkbox\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#1d5dab\"\n                                        className=\"icon\"\n                                        size=\"lg\"\n                                        icon={faCheck}\n                                    />\n                                }\n                                name=\"faction3\"\n                                checked={true}\n                                onChange={(value: boolean) =>\n                                    setFactions({ ...factions, F9280: value })\n                                }\n                                borderColor=\"#2F3134\"\n                                style={styles.checkbox}\n                                labelStyle={{\n                                    marginLeft: 5,\n                                    userSelect: \"none\",\n                                }}\n                                label=\"Nomads Medical\"\n                            />\n                            <Checkbox\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#1d5dab\"\n                                        className=\"icon\"\n                                        size=\"lg\"\n                                        icon={faCheck}\n                                    />\n                                }\n                                name=\"faction4\"\n                                checked={true}\n                                onChange={(value: boolean) =>\n                                    setFactions({ ...factions, F40992: value })\n                                }\n                                borderColor=\"#2F3134\"\n                                style={styles.checkbox}\n                                labelStyle={{\n                                    marginLeft: 5,\n                                    userSelect: \"none\",\n                                }}\n                                label=\"Medic!!\"\n                            />\n                        </div>\n                    </div>\n                    <Contract />\n                </main>\n            </header>\n        </div>\n    );\n}\n\nexport default AddContract;\n\n{\n    /* <div>\n                                <input\n                                    type=\"checkbox\"\n                                    value=\"39H\"\n                                    name=\"factions\"\n                                    checked={true}\n                                />\n                                <label htmlFor=\"39H\">39th Street Healers</label>\n                            </div> */\n}\n","import React, { useState, useEffect } from \"react\";\nimport ReactDom from \"react-dom\";\nimport logo from \"./logo.svg\";\nimport \"./styling/App.css\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n} from \"react-router-dom\";\n//background color\nimport { Helmet } from \"react-helmet\";\n\n//general components\nimport Nav from \"../src/components/Nav\";\nimport Members from \"../src/components/Members\";\nimport Home from \"../src/components/Home\";\n\n//not logged in\nimport Login from \"../src/components/Login\";\n\n//logged in\nimport Contracts from \"../src/components/Contracts\";\nimport Contract from \"../src/components/Contract\";\nimport AddContract from \"../src/components/AddContract\";\n\nimport { useAppSelector, useAppDispatch } from \"./hooks\";\nimport { login } from \"./scripts/userSlice\";\n\n//redux madness\n// import { Provider } from \"react-redux\";\n// import store from \"./store\";\n\nfunction App() {\n    useEffect(() => {\n        document.title = \"UHC\";\n    }, []);\n\n    const user = useAppSelector((state) => state.userReducer.value);\n    const dispatch = useAppDispatch();\n\n    return (\n        <div className=\"App\">\n            <Helmet>\n                <style>{\"body { background-color: #131415; }\"}</style>\n            </Helmet>\n            <Router>\n                <Nav />\n                {user.name ? (\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/home\" />\n                        </Route>\n                        <Route path=\"/home\" component={Home} />\n                        <Route path=\"/members\" component={Members} />\n                        <Route path=\"/contracts\" component={Contracts} />\n                        <Route path=\"/contract\" component={Contract} />\n                        <Route path=\"/add-contract\" component={AddContract} />\n                    </Switch>\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/home\" />\n                        </Route>\n                        <Route path=\"/home\" component={Home} />\n                        <Route path=\"/members\" component={Members} />\n                        <Route path=\"/login\" component={Login} />\n                    </Switch>\n                )}\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userSlice from \"./scripts/userSlice\";\r\nimport contractSlice from \"./scripts/contractSlice\";\r\nimport leaderboardSlice from \"./scripts/leaderboardSlice\";\r\nimport livefeedSlice from \"./scripts/livefeedSlice\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        userReducer: userSlice,\r\n        contractReducer: contractSlice,\r\n        leaderboardReducer: leaderboardSlice,\r\n        livefeedReducer: livefeedSlice,\r\n    },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}